{
  "openapi": "3.0.0",
  "info": {
    "version": "1.2.0",
    "title": "Econic ID API Reference",
    "termsOfService": "https://www.econicapp.com/terms",
    "contact": {
      "email": "devops@tecnologiadebloques.com",
      "url": "http://www.econicapp.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://storage.googleapis.com/econic-assets/econicid_logo_white.png"
    },
    "description": "# Introduction\nEconic ID is an *authentication* and *authorization* system which at its core it allows users to manage their digital identities, \nby allowing them to upload proofs, such as government issued IDs, that prove beyond doubt that they are the person who they claim to be;\nsharing those proofs with third parties; and creating digital credentials. \n\nThe Econic ID API implements the OAuth 2 protocol and is built on HTTP around REST and resource oriented URLs. \nIt accepts requests bodies and returns responses encoded in JSON. Standard HTTP response codes and verbs are used. \n\n# Enviroments\nAll the Econic products have a public sandbox environment, known as testnet, for demo and testing purposes. Each environment has \nits own accounts and objects, so you will need to create a separate Econic ID account for the testnet environment.\n\n# Authentication\nEconic ID implements the OAuth 2.0 protocol, and thus supports two forms of authentication\n- OAuth2 tokens \n- API Keys\n\nOAuth2 tokens are obtained after creating an account, or loging in though our OAuth2 form with your user credentials.\nFor security reasons, these tokens expire every 1 hour. API Keys are created and managed though this API, while using an OAuth token as authentication.\n\nOnce a user has created a Econic ID account it is recommended that he creates an API key to allow him access without the need for his credentials. \nAs a general rule, you should only use OAuth2 tokens when creating an account, or if your integration doesn't allow secure storage of the API Keys. \n\n# Getting Started\nWe recomend you use [Postman](https://www.postman.com/) while getting familiar with the API. Once you have requested access, you will be provided with \nan OAuth2 client credentials, so you can create your Econic ID account though Postman or a OAuth2 library. \n\nThe first thing you want to do after creating your account, is to create a pair of API Keys. This is done though a `Create Key` action in the `Keys` resource.\nAfter creating the resource, the server will return to you the `Public Key`, the `Private Key` and the `Transaction Key` of your newly created `API Keys`. \nIt is very important you save the `Private Key` as this is only returned during the key creating and can't be recovered. If you lose it, you will need to\ncreate new `Keys`. \n\nOnce you have created your API Key, you can sign future requests using the `Private Key` you saved previously. While signatures can be created in any programming language,\nfor convinience we recommend you use our [developer toolkit](https://github.com/TecnologiaDeBloques/node-developer-toolkit). This will generate the signature, and if you\nare using Postman it will automatically add it to the request header.\n\nAfter this, you are free to explore the API and its different resources.\n"
  },
  "tags": [
    {
      "name": "Profile",
      "description": "Defined as an actor in the system, there can be two types of profiles: Personal (representing a human) and business (representing an organization).\n\nWhen you create an Econic ID account, you create a `user` which is an internal resource of the system that is associated with your login credentials,\nand a personal `profile`. This personal `profile` represents you as an individual, but since you may want to act as an organization you can create a \nseparate `profile` know as a business `profile`.\n\nMost resources are owned by `profiles` instead of `users`, so this way you can separate your personal account from your business account while not having to \ncreate multiple Econic ID accounts and to manage multiple credentials.\n\nA `user` can only have a single personal `profile`, which as mentioned before is automatically created.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Profile\" />\n"
    },
    {
      "name": "Key",
      "description": "API Keys comprised of a ED25519 Key Pair and a secret known as Transaction Key. \n\n`Keys` allow `users` to authenticate and to authorize requests in all Econic systems. The ED25519 key pair its utilized for signing requests, while the Transaction Key must be \nadded as well when authorizing transactions. After creation, the Ed25519 Public Key is stored in our server, and the Private Key is sent alongside the Transaction Key back the client. \n\nYou must save the Private Key and the Transaction Key after creation, as both are unrecoverable and only sent as a response during the key creation. \nIt will be needed to create a new Key if you lose any of these secrets.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Key\" />\n"
    },
    {
      "name": "Device",
      "description": "`Key` paired to a physical device which can receive push notifications.\n\nA `Device` is comprised of a `Key` and serves the same functions as a `Key`, but also allows for the reception of push notifications.\n<SchemaDefinition schemaRef=\"#/components/schemas/Device\" />\n"
    },
    {
      "name": "Proof Type",
      "description": "Lorem Ipsum\n<SchemaDefinition schemaRef=\"#/components/schemas/ProofType\" />\n"
    },
    {
      "name": "Proof",
      "description": "Evidence provided by the `profile` which \"provees\" the identity of the legal person it represents.\n\nIdentity Proofs are as the name suggest, allow the `profile` to build a digital identity by registering things such as a government issued ID, or a address proof.\n<SchemaDefinition schemaRef=\"#/components/schemas/Proof\" />\n"
    },
    {
      "name": "Certificate Type",
      "description": "Lorem Ipsum\n<SchemaDefinition schemaRef=\"#/components/schemas/CertificateType\" />\n"
    },
    {
      "name": "Certificate",
      "description": "Lorem Ipsum\n<SchemaDefinition schemaRef=\"#/components/schemas/Certificate\" />\n"
    },
    {
      "name": "Credential Type",
      "description": "Lorem Ipsum\n<SchemaDefinition schemaRef=\"#/components/schemas/CredentialType\" />\n"
    },
    {
      "name": "Credential",
      "description": "Lorem Ipsum\n<SchemaDefinition schemaRef=\"#/components/schemas/Credential\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Core Resources",
      "tags": [
        "Profile",
        "Key",
        "Device",
        "Proof Type",
        "Proof",
        "Certificate Type",
        "Certificate",
        "Credential Type",
        "Credential"
      ]
    },
    {
      "name": "User Owned Resources",
      "tags": [
        "Profiles",
        "Keys",
        "Devices"
      ]
    },
    {
      "name": "Profile Owned Resources",
      "tags": [
        "Certificate Types",
        "Certificates",
        "Credential Types",
        "Credentials",
        "Proof Types",
        "Proofs"
      ]
    }
  ],
  "security": [
    {
      "oAuth": []
    },
    {
      "APIKey": []
    }
  ],
  "servers": [
    {
      "url": "https://testnet.econicid.com",
      "description": "Testing environment"
    },
    {
      "url": "https://www.econicid.com",
      "description": "Production environment"
    }
  ],
  "paths": {
    "/certificate_types": {
      "get": {
        "tags": [
          "Certificate Types"
        ],
        "summary": "List Certificate Types",
        "description": "Returns a list of the existing proof types.",
        "operationId": "listCertificateTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificateType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Certificate Types"
        ],
        "summary": "Create a Certificate Type",
        "description": "Creates a new Certificate Type",
        "operationId": "createCertificateType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/certificate_types/{certificate_type_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CertificateType"
        }
      ],
      "get": {
        "tags": [
          "Certificate Types"
        ],
        "summary": "Get a Certificate Type",
        "description": "Retrieve an existing Certificate Type",
        "operationId": "getCertificateType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Certificate Types"
        ],
        "summary": "Update a Certificate Type",
        "description": "Update an existing Certificate Type",
        "operationId": "updateCertificateType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Certificate Types"
        ],
        "summary": "Delete a Certificate Type",
        "description": "Delete a Certificate Type",
        "operationId": "deleteCertificateType",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "List Certificates",
        "description": "Returns a list of all the existing Certificates",
        "operationId": "listCertificates",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate-2"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Emit a Certificate",
        "description": "Emits a new Certificate",
        "operationId": "emitCertificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Emit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/certificates/{certificate_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Certificate"
        }
      ],
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a Certificate",
        "description": "Retrieve an existing Certificate.",
        "operationId": "getCertificate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/certificates/{certificate_id}/revoke": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Certificate"
        }
      ],
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Revoke a Certificate",
        "description": "Revoke a Certificate which will render it invalid",
        "operationId": "revokeCertificate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRevoked"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credential_types": {
      "get": {
        "tags": [
          "Credential Types"
        ],
        "summary": "List Credential Types",
        "description": "Returns a list of the existing proof types.",
        "operationId": "listCredentialTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credential Types"
        ],
        "summary": "Create a Credential Type",
        "description": "Creates a new Credential Type",
        "operationId": "createCredentialType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credential_types/{credential_type_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CredentialType"
        }
      ],
      "get": {
        "tags": [
          "Credential Types"
        ],
        "summary": "Get a Credential Type",
        "description": "Retrieve an existing Credential Type",
        "operationId": "getCredentialType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Credential Types"
        ],
        "summary": "Update a Credential Type",
        "description": "Update an existing Credential Type",
        "operationId": "updateCredentialType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update-2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Credential Types"
        ],
        "summary": "Delete a Credential Type",
        "description": "Delete a Credential Type",
        "operationId": "deleteCredentialType",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List Credentials",
        "description": "Returns a list of all the existing Credentials",
        "operationId": "listCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Emit a Credential",
        "description": "Emits a new Credential",
        "operationId": "emitCredential",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Emit-2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credentials/{credential_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Credential"
        }
      ],
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get a Credential",
        "description": "Retrieve an existing Credential.",
        "operationId": "getCredential",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credentials/{credential_id}/revoke": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Credential"
        }
      ],
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Revoke a Credential",
        "description": "Revoke a Certificate which will render it invalid",
        "operationId": "revokeCredential",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRevoked"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credentials/{credential_id}/sign": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Credential"
        }
      ],
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Sign with a Credential",
        "description": "Create a signature using the Credential",
        "operationId": "signWithCredential",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sign-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/credentials/{credential_id}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Credential"
        }
      ],
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Verify a signature from a Credential",
        "description": "Verifies a signature from a Credential",
        "operationId": "verifySignatureFromCredential",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Verify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verify-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "List Devices",
        "description": "Returns a list of all your devices sorted chronologicaly by creation date.",
        "operationId": "listDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Create a device",
        "description": "Creates a new device",
        "operationId": "createDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Create-4"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/devices/{device_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Device"
        }
      ],
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get a device",
        "description": "Retrieve an existing Device",
        "operationId": "getDevice",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Update a device",
        "description": "Update an existing device",
        "operationId": "updateDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update-3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete a device",
        "description": "Delete a device",
        "operationId": "deleteDevice",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/keys": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "List Keys",
        "description": "Returns a list of all your keys sorted chronologicaly by creation date.",
        "operationId": "listKeys",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Key"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Create a key",
        "description": "Creates a new key",
        "operationId": "createKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Create-6"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/keys/{key_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Key"
        }
      ],
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "Get a key",
        "description": "Retrieve an existing key.",
        "operationId": "getKey",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Keys"
        ],
        "summary": "Delete a key",
        "description": "Delete a key",
        "operationId": "deleteKey",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "List profiles",
        "description": "Returns a list of all your profiles sorted chronologicaly by creation date.",
        "operationId": "listProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Profile"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Create a profile",
        "description": "Creates a new profile",
        "operationId": "createProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/profiles/{profile_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Profile"
        }
      ],
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get a profile",
        "description": "Get an existing profile from its ID.",
        "operationId": "getProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Update a profile",
        "description": "Update an existing profile",
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update-4"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Delete a profile",
        "description": "Delete a profile",
        "operationId": "deleteProfile",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/profiles/{profile_id}/requestVerification": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Profile"
        }
      ],
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Request email or sms verification code",
        "description": "Send an Email or an SMS message containing a verification code, which can be used to associate the provided email or phone number with your Econic Profile.",
        "operationId": "profileRequestVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestVerification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerification-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/profiles/{profile_id}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Profile"
        }
      ],
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Verify email or phone number",
        "description": "Using a verification code, associate an email or phone number to your Econic Profile.",
        "operationId": "profileVerify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Verify-3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verify-4"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/proof_types": {
      "get": {
        "tags": [
          "Proof Types"
        ],
        "summary": "List Proof Types",
        "description": "Returns a list of the existing proof types.",
        "operationId": "listProofTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProofType-2"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Proof Types"
        ],
        "summary": "Create a Proof Type",
        "description": "Creates a new Proof Type",
        "operationId": "createProofType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-8"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofType-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/proof_types/{proof_type_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ProofType"
        }
      ],
      "get": {
        "tags": [
          "Proof Types"
        ],
        "summary": "Get a Proof Type",
        "description": "Retrieve an existing Proof Type",
        "operationId": "getProofType",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofType-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Proof Types"
        ],
        "summary": "Update a Proof Type",
        "description": "Update an existing Proof Type",
        "operationId": "updateProofType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update-5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofType-2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Proof Types"
        ],
        "summary": "Delete a Proof Type",
        "description": "Delete a Proof Type",
        "operationId": "deleteProofType",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/proofs": {
      "get": {
        "tags": [
          "Proofs"
        ],
        "summary": "List proofs",
        "description": "Returns a list of all your identity proofs sorted chronologicaly by creation date.",
        "operationId": "listProofs",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Proof"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Proofs"
        ],
        "summary": "Create a proof",
        "description": "Creates a new proof",
        "operationId": "createProof",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create-9"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proof"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/proofs/{proof_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Proof"
        }
      ],
      "get": {
        "tags": [
          "Proofs"
        ],
        "summary": "Get a proof",
        "description": "Retrieve an existing proof.",
        "operationId": "getProof",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proof"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Proofs"
        ],
        "summary": "Delete a proof",
        "description": "Delete a proof",
        "operationId": "deleteProof",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/proofs/{proof_id}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Proof"
        }
      ],
      "post": {
        "tags": [
          "Proofs"
        ],
        "summary": "Approve Proof",
        "description": "Mark a proof as valid",
        "operationId": "approveProof",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Verify-5"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proof"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/RequestFailed"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Certificate": {
        "$ref": "#/components/schemas/Certificate-2"
      },
      "CertificateTypes": {
        "$ref": "#/components/schemas/CertificateType"
      },
      "Credentials": {
        "$ref": "#/components/schemas/Credential"
      },
      "CredentialTypes": {
        "$ref": "#/components/schemas/CredentialType"
      },
      "Devices": {
        "$ref": "#/components/schemas/Device"
      },
      "Keys": {
        "$ref": "#/components/schemas/Key"
      },
      "Profiles": {
        "$ref": "#/components/schemas/Profile"
      },
      "Proofs": {
        "$ref": "#/components/schemas/Proof"
      },
      "ProofType": {
        "$ref": "#/components/schemas/ProofType-2"
      },
      "ID": {
        "description": "Hex encoded unique identifier of the Certificate Type",
        "type": "string",
        "minLength": 1,
        "example": "0xA7A698535983eEABB57B3734fa5432C8531D8A19"
      },
      "ID-2": {
        "description": "Hex encoded unique identifier of a profile.",
        "type": "string",
        "minLength": 1,
        "example": "0xDAD81C5E34081Fb2514C9bF69d07Dd76CA696A59"
      },
      "Name": {
        "description": "Name of the Certificate Type.",
        "type": "string",
        "minLength": 1,
        "example": "BAD GUY Certification"
      },
      "Description": {
        "description": "Detailed description about the certificate.",
        "type": "string",
        "minLength": 1,
        "example": "Hand to hand combat & self defense certification."
      },
      "ID-3": {
        "description": "Hex encoded unique identifier of the Proof",
        "type": "string",
        "minLength": 1,
        "example": "0xDDDDD87eF86691778694C978EE1352CB6106adE6"
      },
      "CertificateType": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of error returned.",
            "type": "string",
            "example": "invalid_request_error"
          },
          "code": {
            "description": "A short string indiciating the error reported.",
            "type": "string",
            "example": "ERR412"
          },
          "message": {
            "description": "A human readable message provinding more details about the error.",
            "type": "string",
            "example": "Account Address must be 20 characters long."
          }
        }
      },
      "Create": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "Update": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "ID-4": {
        "description": "Hex encoded unique identifier of the certificate",
        "type": "string",
        "minLength": 1,
        "example": "0xCCCF443FaED05e40C6b4480818626bc140C3d498"
      },
      "EmissorID": {
        "description": "Profile ID of the emissor of this certificate",
        "type": "string",
        "minLength": 1,
        "example": "0xBABE0bCAbC71488E36ec54FD7a8B9e72C6b2a128"
      },
      "EmissionDate": {
        "description": "The date for when the certificate was emited.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "ExpirationDate": {
        "description": "The date when the certificate expires.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "Status": {
        "description": "Status of the certificate",
        "type": "string",
        "minLength": 1,
        "enum": [
          "EMITTED",
          "REVOKED"
        ]
      },
      "Data": {
        "description": "JSON encoded object that allows adding extra information to the resource.",
        "type": "string",
        "example": "{ codename: \"Dutches\", internal_code: 123456}"
      },
      "Certificate-2": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-4"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "certificate_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID"
          },
          "emission_date": {
            "$ref": "#/components/schemas/EmissionDate"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "Emit": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "certificate_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "StatusRevoked": {
        "description": "Status of the certificate",
        "type": "string",
        "minLength": 1,
        "enum": [
          "EMITTED",
          "REVOKED"
        ],
        "example": "REVOKED"
      },
      "CertificateRevoked": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-4"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "certificate_type_id": {
            "$ref": "#/components/schemas/ID"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID"
          },
          "emission_date": {
            "$ref": "#/components/schemas/EmissionDate"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate"
          },
          "status": {
            "$ref": "#/components/schemas/StatusRevoked"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "ID-5": {
        "description": "Hex encoded unique identifier of the Certificate Type",
        "type": "string",
        "minLength": 1,
        "example": "0xCA7bBFa60AF11e87aAFb55e6D072899b111016be"
      },
      "Name-2": {
        "description": "Name of the Certificate Type.",
        "type": "string",
        "minLength": 1,
        "example": "CIA ID"
      },
      "Description-2": {
        "description": "Detailed description about this proof..",
        "type": "string",
        "minLength": 1,
        "example": "Official ID from CIA Agents in active duty."
      },
      "CredentialType": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-5"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name-2"
          },
          "description": {
            "$ref": "#/components/schemas/Description-2"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "Create-2": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name-2"
          },
          "description": {
            "$ref": "#/components/schemas/Description-2"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "Update-2": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name-2"
          },
          "description": {
            "$ref": "#/components/schemas/Description-2"
          },
          "proof_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID-3"
            }
          }
        }
      },
      "ID-6": {
        "description": "Hex encoded unique identifier of the Credential",
        "type": "string",
        "minLength": 1,
        "example": "0xBAD51e07e97a3740038982443327F231393c6e5A"
      },
      "EmissorID-2": {
        "description": "Profile ID of the emissor of this credential",
        "type": "string",
        "minLength": 1,
        "example": "0xBABE0bCAbC71488E36ec54FD7a8B9e72C6b2a128"
      },
      "EmissionDate-2": {
        "description": "The date for when the credential was emited.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "ExpirationDate-2": {
        "description": "The date when the credential expires.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "Credential": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-6"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "credential_type_id": {
            "$ref": "#/components/schemas/ID-5"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID-2"
          },
          "emission_date": {
            "$ref": "#/components/schemas/EmissionDate-2"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate-2"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "Emit-2": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "credential_type_id": {
            "$ref": "#/components/schemas/ID-5"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID-2"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate-2"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "CredentialRevoked": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-6"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "credential_type_id": {
            "$ref": "#/components/schemas/ID-5"
          },
          "emissor_id": {
            "$ref": "#/components/schemas/EmissorID-2"
          },
          "emission_date": {
            "$ref": "#/components/schemas/EmissionDate-2"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate-2"
          },
          "status": {
            "$ref": "#/components/schemas/StatusRevoked"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "Sign": {
        "type": "object",
        "properties": {
          "message": {
            "description": "The message that will be signed.",
            "type": "string",
            "minLength": 1,
            "example": "Danger Zone!"
          }
        }
      },
      "Sign-2": {
        "type": "object",
        "properties": {
          "message": {
            "description": "The message that will be signed.",
            "type": "string",
            "minLength": 1,
            "example": "Danger Zone!"
          },
          "signature": {
            "description": "The signature of the credential for the message.",
            "type": "string",
            "minLength": 1,
            "example": "OWlGtEadCJF+k1pOOFBzVBY75vgy7WJGeEkPMN5g36qbt9dc8SPDlis+4dsxCrjc3P2sgsgd08Yd145K2N3wBw=="
          }
        }
      },
      "Verify": {
        "type": "object",
        "properties": {
          "message": {
            "description": "The message that will be signed.",
            "type": "string",
            "minLength": 1,
            "example": "Danger Zone!"
          },
          "signature": {
            "description": "The signature of the credential for the message.",
            "type": "string",
            "minLength": 1,
            "example": "OWlGtEadCJF+k1pOOFBzVBY75vgy7WJGeEkPMN5g36qbt9dc8SPDlis+4dsxCrjc3P2sgsgd08Yd145K2N3wBw=="
          }
        }
      },
      "Verify-2": {
        "type": "object",
        "properties": {
          "message": {
            "description": "The message that will be signed.",
            "type": "string",
            "minLength": 1,
            "example": "Danger Zone!"
          },
          "signature": {
            "description": "The signature of the credential for the message.",
            "type": "string",
            "minLength": 1,
            "example": "OWlGtEadCJF+k1pOOFBzVBY75vgy7WJGeEkPMN5g36qbt9dc8SPDlis+4dsxCrjc3P2sgsgd08Yd145K2N3wBw=="
          },
          "valid": {
            "description": "A boolean returning if the credential signature is valid for the provided message.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "ID-7": {
        "description": "Unique identifier of the Device",
        "type": "string",
        "minLength": 1,
        "example": "b0f2f291-74d5-403b-9a82-60961438ca95"
      },
      "ID-8": {
        "description": "Hex encoded unique identifier of the user.",
        "type": "string",
        "minLength": 1,
        "example": "b57665d54f77faa8ea3b8588c590b5acf1c29a2008fbede8b770d8ddbf5d54d1"
      },
      "ID-9": {
        "description": "Unique identifier of the API key, it's the public key of the Ed25519 key pair",
        "type": "string",
        "minLength": 1,
        "example": "SOLqeGfbG8XRHumB3QQ6zf2G3ybNDG0RiGiC1otYClQ="
      },
      "Name-3": {
        "description": "User assigned name of the Device.",
        "type": "string",
        "minLength": 1,
        "example": "My iPhone"
      },
      "NotificationToken": {
        "description": "Token utilized to receive Push Notifications.",
        "type": "string",
        "minLength": 1,
        "example": "bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1..."
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-7"
          },
          "owner_id": {
            "$ref": "#/components/schemas/ID-8"
          },
          "key_id": {
            "$ref": "#/components/schemas/ID-9"
          },
          "name": {
            "$ref": "#/components/schemas/Name-3"
          },
          "notification_token": {
            "$ref": "#/components/schemas/NotificationToken"
          }
        }
      },
      "Scopes": {
        "description": "Space separated list of permission scopes of the key.",
        "type": "string",
        "minLength": 1,
        "example": "keys devices profiles"
      },
      "Create-3": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name-3"
          },
          "scopes": {
            "$ref": "#/components/schemas/Scopes"
          },
          "notification_token": {
            "$ref": "#/components/schemas/NotificationToken"
          }
        }
      },
      "Name-4": {
        "description": "User assigned name of the Key.",
        "type": "string",
        "minLength": 1,
        "example": "Test API Key"
      },
      "Active": {
        "description": "If the key is active or if it has been temporaly disabled.",
        "type": "boolean",
        "minLength": 1
      },
      "CreatedAt": {
        "description": "Key creation date.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "LastUsed": {
        "description": "Last time the key was utilized.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "Key": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-9"
          },
          "owner_id": {
            "$ref": "#/components/schemas/ID-8"
          },
          "name": {
            "$ref": "#/components/schemas/Name-4"
          },
          "active": {
            "$ref": "#/components/schemas/Active"
          },
          "created": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "last_used": {
            "$ref": "#/components/schemas/LastUsed"
          },
          "scopes": {
            "$ref": "#/components/schemas/Scopes"
          }
        }
      },
      "Secrets": {
        "type": "object",
        "properties": {
          "private_key": {
            "description": "Ed25519 Private Key utilized to authorize API requests",
            "type": "string",
            "minLength": 1,
            "example": "zVVlZ+eaaVHgzBXdsS9C1UwBTuJOyKMNKe5vHEL3Uw4ItepzfOB2SQyhB0wyN+ql+Wu0EnQksr07c68Y6zTaRw=="
          },
          "transaction_key": {
            "description": "Key utilized to authorize transactions",
            "type": "string",
            "minLength": 1,
            "example": "AJ4538ynj2X0U9AVWt89HLWyHSdthGGClPnVQ0LFzs0="
          }
        }
      },
      "Create-4": {
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "key": {
            "$ref": "#/components/schemas/Key"
          },
          "secrets": {
            "$ref": "#/components/schemas/Secrets"
          }
        }
      },
      "Update-3": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name-3"
          },
          "notification_token": {
            "$ref": "#/components/schemas/NotificationToken"
          }
        }
      },
      "Create-5": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name-4"
          },
          "scopes": {
            "$ref": "#/components/schemas/Scopes"
          }
        }
      },
      "Create-6": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/Key"
          },
          "secrets": {
            "$ref": "#/components/schemas/Secrets"
          }
        }
      },
      "Type": {
        "description": "The type of profile. Personal profiles are for humans, while business profiles are for an organization or business.",
        "type": "string",
        "minLength": 1,
        "example": "PERSONAL",
        "enum": [
          "PERSONAL",
          "BUSINESS"
        ]
      },
      "DisplayName": {
        "description": "Public diplay name of the profile.",
        "type": "string",
        "minLength": 1,
        "example": "Sterling Archer"
      },
      "Avatar": {
        "description": "Public facing avatar of the profile.",
        "type": "string",
        "minLength": 1,
        "example": "serpiente"
      },
      "Birthdate": {
        "description": "Birthdate for personal profiles, or when the organization was created for business profiles.",
        "type": "string",
        "example": "13-11-1980"
      },
      "Email": {
        "description": "Verified email of the profile.",
        "type": "string",
        "format": "email",
        "example": "duchess@cia.com"
      },
      "Phone": {
        "description": "Verified phone number of the profile.",
        "type": "string",
        "example": "5185550110"
      },
      "Gender": {
        "description": "Gender of the person. (Only applied for personal profiles).",
        "type": "string",
        "minLength": 1,
        "example": "MALE"
      },
      "TrustLevel": {
        "description": "The level of trust this profile has, which can be changed though profile verification.",
        "type": "string",
        "minLength": 1,
        "example": "FULL",
        "enum": [
          "NONE",
          "MARGINAL",
          "FULL",
          "ULTIMATE"
        ]
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "owner_id": {
            "$ref": "#/components/schemas/ID-8"
          },
          "profile_type": {
            "$ref": "#/components/schemas/Type"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "avatar": {
            "$ref": "#/components/schemas/Avatar"
          },
          "birthdate": {
            "$ref": "#/components/schemas/Birthdate"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "trust_level": {
            "$ref": "#/components/schemas/TrustLevel"
          }
        }
      },
      "Create-7": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "avatar": {
            "$ref": "#/components/schemas/Avatar"
          },
          "birthdate": {
            "$ref": "#/components/schemas/Birthdate"
          }
        }
      },
      "Update-4": {
        "type": "object",
        "properties": {
          "display_name": {
            "$ref": "#/components/schemas/DisplayName"
          },
          "avatar": {
            "$ref": "#/components/schemas/Avatar"
          },
          "birthdate": {
            "$ref": "#/components/schemas/Birthdate"
          }
        }
      },
      "RequestVerification": {
        "type": "object",
        "properties": {
          "delivery_method": {
            "description": "Method used to deliver the code. Can be `email` or `sms`.",
            "type": "string",
            "format": "string",
            "example": "sms"
          },
          "destinatary": {
            "description": "Email or phone number that will receive the verification code.",
            "type": "string",
            "format": "string",
            "example": "+525566668888"
          }
        }
      },
      "RequestVerification-2": {
        "type": "object",
        "properties": {
          "destinatary": {
            "description": "Email or phone number that received the verification code.",
            "type": "string",
            "format": "string",
            "example": "+525566668888"
          }
        }
      },
      "Verify-3": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Verification code that was sent to the destinatary.",
            "type": "string",
            "format": "string",
            "example": "865981"
          },
          "delivery_method": {
            "description": "Method used to deliver the code. Can be `email` or `sms`.",
            "type": "string",
            "format": "string",
            "example": "sms"
          },
          "destinatary": {
            "description": "Email or phone number that received the verification code.",
            "type": "string",
            "format": "string",
            "example": "+525566668888"
          }
        }
      },
      "Verify-4": {
        "type": "object",
        "properties": {
          "success": {
            "description": "Was the verification successful.",
            "type": "boolean",
            "example": true
          },
          "destinatary": {
            "description": "Email or phone number that received the verification code.",
            "type": "string",
            "format": "string",
            "example": "+525566668888"
          }
        }
      },
      "ID-10": {
        "description": "Unique identifier of the Proof Type",
        "type": "string",
        "minLength": 1,
        "example": "0xCA01baf34b850b813D2dd44061DcCD547b310D64"
      },
      "Name-5": {
        "description": "Name of the Proof Type.",
        "type": "string",
        "minLength": 1,
        "example": "CCW Permit"
      },
      "Description-3": {
        "description": "Detailed description about this proof..",
        "type": "string",
        "minLength": 1,
        "example": "Concealed carry permit for Federal Agents."
      },
      "ProofType-2": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-10"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name-5"
          },
          "description": {
            "$ref": "#/components/schemas/Description-3"
          }
        }
      },
      "Create-8": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "name": {
            "$ref": "#/components/schemas/Name-5"
          },
          "description": {
            "$ref": "#/components/schemas/Description-3"
          }
        }
      },
      "Update-5": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name-5"
          },
          "description": {
            "$ref": "#/components/schemas/Description-3"
          }
        }
      },
      "EmissionDate-3": {
        "description": "The date for when the proof was emited.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "ExpirationDate-3": {
        "description": "The date when the proof expires.",
        "type": "string",
        "format": "date",
        "minLength": 1
      },
      "Status-2": {
        "description": "Status of the proof.",
        "type": "string",
        "minLength": 1,
        "enum": [
          "PENDING",
          "APPROVED",
          "REJECTED"
        ]
      },
      "FileURL": {
        "description": "URL of where the submitted image of the proof is stored.",
        "type": "string",
        "minLength": 1,
        "example": "www.econicid.com/bucket/321dufas89"
      },
      "VerificatorID": {
        "description": "Profile ID from who verified or rejected this proof.",
        "type": "string",
        "minLength": 1,
        "example": "0x666569Bb7FcecD5c54Ed0EbB67817d1c46247E79"
      },
      "Proof": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID-3"
          },
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "proof_type_id": {
            "$ref": "#/components/schemas/ID-10"
          },
          "emission_date": {
            "$ref": "#/components/schemas/EmissionDate-3"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate-3"
          },
          "status": {
            "$ref": "#/components/schemas/Status-2"
          },
          "file_url": {
            "$ref": "#/components/schemas/FileURL"
          },
          "verificator_id": {
            "$ref": "#/components/schemas/VerificatorID"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "Create-9": {
        "type": "object",
        "properties": {
          "profile_id": {
            "$ref": "#/components/schemas/ID-2"
          },
          "proof_type_id": {
            "$ref": "#/components/schemas/ID-10"
          },
          "expiration_date": {
            "$ref": "#/components/schemas/ExpirationDate-3"
          },
          "file_url": {
            "$ref": "#/components/schemas/FileURL"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          }
        }
      },
      "Verify-5": {
        "type": "object",
        "properties": {
          "verificator_id": {
            "$ref": "#/components/schemas/VerificatorID"
          },
          "new_status": {
            "$ref": "#/components/schemas/Status-2"
          },
          "reason": {
            "description": "Motive why the proof was rejected",
            "type": "string",
            "minLength": 1,
            "example": "ID presents signs that it has been manipulated."
          }
        }
      }
    },
    "securitySchemes": {
      "oAuth": {
        "description": "Econic ID implements the OAuth protocol. A user can create and login to his Econic ID account by utilizing an official OAuth client. After the he can grant certain permissions utilizing scopes. Once he has logged in successfuly, the server will return a token that can be used for accessing the Econic ID API.",
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "tokenUrl": "http://testnet.econicid.com/oauth2/token",
            "authorizationUrl": "http://testnet.econicid.com/oauth2/auth",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "APIKey": {
        "description": "The Econic ID API can be accessed utilizing API Keys which are based on the Ed25519 public-key system. An API Key can be created by making a request to the `create key` endpoint while utilizing a valid OAuth Token. The server will return a Key pair that contains both the Public Key which is the identifier of the API Key and a Private Key which is used to sign requests. When utilizing an API Key for Autorization, the API Key must be included in the headers. **Example** `Authorization:` `ApiKey-v1 etRWGzf+AY8m6DHalxO28aTDi0PXRi7w3L4F0XKSf/Y=`",
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      },
      "Signature": {
        "description": "When utilizing an API Key for Authorization, a valid signature must be provided in the headers alongside the API Key. Signatures can be generated utilizing the Private Key and one of our official libraries. **Example** `Signature:` `9a75ZaHd8ULqtZfgVounQItJ3eSqMd25IDe6tNizUJj52ZdlEBP4tjMtUhGi/q84WlrFxrbL3EuqqNitDX7KBQ==`",
        "type": "apiKey",
        "in": "header",
        "name": "Signature"
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "From what object number will the pagination start",
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "CertificateType": {
        "name": "certificate_type_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the Certificate Type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Certificate": {
        "name": "certificate_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the certificate",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CredentialType": {
        "name": "credential_type_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the Credential Type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Credential": {
        "name": "credential_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the credential",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Device": {
        "name": "device_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the device",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Key": {
        "name": "key_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the key",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Profile": {
        "name": "profile_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the profile",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ProofType": {
        "name": "proof_type_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the Proof Type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Proof": {
        "name": "proof_id",
        "in": "path",
        "description": "The hex encoded unique identifier of the proof",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request was unacceptable, often due a invalid or missing required parameter.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The request lacks valid authentication credentials for the target resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RequestFailed": {
        "description": "The request was valid but it failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests hit the API too quickly. Try again later or backoff your requests.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Something went wrong on Econic's end.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource doesn't exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "The request errors/Conflicts with another request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}